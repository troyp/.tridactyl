" ╭─────────╮
" │ General │
" ╰─────────╯

" general libraries
jsb -r S.js
jsb -r js/sprintf.js
" tridactyl-specific libraries
jsb -r utils.js
" app-specific libraries
jsb -r js/suncalc.js
" app-specific code
jsb -r apps.js
" site-specific code
jsb -r sites.js
source ~/.tridactyl/sites.tri
" personal info
jsb -r personal/personal.js

jsb window.S = S
jsb window.utils = utils
jsb window.apps = apps
jsb window.sites = sites
jsb window.sprintf = sprintf

" ───────────────────────────────────────────────────────────────────────────────
" ╭────────────────────────╮
" │ Documentation commands │
" ╰────────────────────────╯
" Create versions of definition commands taking descriptions
command docdef jsb -d¦ utils.tri.docdef(JS_ARGS)¦
" Define command with description - doesn't work with `js -d`/`jsb -d` commands
command command: docdef command
commdoc docbindmode "bind for mode with description"
command docbindmode jsb -d¦ utils.tri.docBindMode(JS_ARGS)¦
command bindmode jsb -d¦ utils.tri.bindMode(JS_ARGS)¦
command unbindmode jsb -d¦ utils.tri.unbindMode(JS_ARGS)¦

command: ibind "bind for insert/input-mode" bindmode i
command: vbind "bind for visual-mode" bind --mode=visual
command: cbind "bind for ex-mode" bind --mode=ex
command: abind "bind for normal, insert, input, ex, visual and hint modes" bindmode all
command: bind: "bind with description" docdef bind
command: ibind: "bind for insert/input-mode with description" docbindmode i
command: vbind: "bind for visual-mode with description" docbindmode visual
command: cbind: "bind for ex-mode with description" docbindmode ex
command: abind: "bind for normal, insert, input, ex, visual and hint modes with description" docbindmode all
commdoc bindurl: "bindurl with description"
command bindurl: jsb -d¦ utils.tri.docBindUrl(JS_ARGS)¦
command: set: "set with description" docdef set
command: setpref: "setpref with description" docdef setpref
command: guiset_quiet: "guiset_quiet with description" docdef guiset_quiet
command: commdoc "provide a description for a command definition on a separate line" js ;
command: bdoc "provide a description for a bind definition on a separate line" js ;
command trisanitize sanitize tridactyllocal

" ───────────────────────────────────────────────────────────────────────────────
" ╭──────────╮
" │ Settings │
" ╰──────────╯
" Autocommands
autocmd TabEnter .* unfocus

" General Settings
"
set gimode nextinput
set tabclosepinned false
set relatedopenpos related
set tabopenpos last
set followpagepatterns.next \\b(forward|next|more|older)\\b|(>>|»)$|(>|»|▸|►)$|次|下|后
set followpagepatterns.prev \\b(back|prev(ious)?|less|newer)\\b|(<|«|◂|◄)$|前|上
set hintchars hjklasdfgyuiopqwertnmzxcvb
set hintfiltermode vimperator-reflow


guiset_quiet statuspanel right
guiset_quiet tabs count

jsb browser.webRequest.onHeadersReceived.addListener(tri.request.clobberCSP,{urls:["<all_urls>"],types:["main_frame"]},["blocking","responseHeaders"])

setpref browser.aboutConfig.showWarning false
setpref browser.autofocus false
setpref browser.compactmode.show true
setpref browser.tabs.tabMinWidth 120
setpref browser.urlbar.speculativeConnect.enabled false
setpref privacy.trackingprotection.enabled true

" ╭────────────╮
" │ searchurls │
" ╰────────────╯
set searchurls.g https://www.google.com.au/search?hl=en&q=%s
set searchurls.gi https://www.google.com/search?site=imghp&tbm=isch&biw=1920&q=%s
set searchurls.d https://duckduckgo.com/?q=%s
set searchurls.dgi https://duckduckgo.com/?q=%s&iar=images
set searchurls.b https://www.bing.com/search?q=%s
set searchurls.w https://en.wikipedia.org/w/index.php?search=%s
set searchurls.diw https://en.wiktionary.org/w/index.php?search=%s
set searchurls.philsep http://plato.stanford.edu/search/searcher.py?query=%s
set searchurls.u http://graphemica.com/search?q=%s
set searchurls.diu https://www.urbandictionary.com/define.php?term=%s
set searchurls.wb http://web.archive.org/web/%s
set searchurls.gh https://github.com/search?utf8=✓&q=%s&type=Repositories&ref=searchresults
set searchurls.yt https://www.youtube.com/results?search_query=%s
set searchurls.gt https://translate.google.com.au/#auto/en/%s
set searchurls.j http://jisho.org/search/%s
set searchurls.gj https://www.google.com.au/search?q=japanese+%s
set searchurls.archwiki https://wiki.archlinux.org/index.php?search=%s&title=Special%3ASearch
set searchurls.se http://stackexchange.com/search?q=%s
set searchurls.mdn https://developer.mozilla.org/en-US/search?q=%s

" ─────────────────────────────────────────────────────────────────────────────
" ╭──────────────────────────╮
" │ Browser-mode keybindings │
" ╰──────────────────────────╯
bind --mode=browser <A-,> tab #

" ─────────────────────────────────────────────────────────────────────────────
" ╭─────────────────────────╮
" │ Normal-mode keybindings │
" ╰─────────────────────────╯

bind: <CA-h> "Scroll left (50px)" scrollpx -50
bind: <CA-l> "Scroll right (50px)" scrollpx +50
bind: j "Scroll down" scrollline +5*
bind: k "Scroll up" scrollline -5*

bind: h "Move to next tab" tabprev
bind: l "Move to previous tab" tabnext

bind: H "Move back in tab history" back
bind: L "Move forward in tab history" forward

commdoc pasten "Open COUNT URLs from clipboard"
command pasten jsb -d¦ utils.tri.pasten(JS_ARGS)¦
commdoc pasten_here "Open COUNT URLs from clipboard, starting in current tab"
command pasten_here jsb -d¦ utils.tri.pasten(JS_ARGS, "here")¦
commdoc pasten_adj "Open COUNT URLs from clipboard in adjacent tabs"
command pasten_adj jsb -d¦ utils.tri.pasten(JS_ARGS, "related")¦
commdoc pasten_bg "Open COUNT URLs from clipboard in background adjacent tabs"
command pasten_bg jsb -d¦ utils.tri.pasten(JS_ARGS, {where: "related", background: true})¦

bind: p "Open url in clipboard in new adjacent tab" pasten_adj
bind: P "Open url in clipboard" pasten_here
bind: gp "Open url in clipboard in new tab" pasten
bind: gP "Open url in clipboard in new background adjacent tab" pasten_bg

unbind x
bind: X "Stop loading" stop

unbind g;
bind g<C-h> showkeys g
bind: gf "Open multiple tabs in background tabs [HINT]" hint -qb
bdoc gh "Open the previous item in tab history in an adjacent tab"
bind gh jsb tri.excmds.tabduplicate().then(t=>browser.tabs.goBack(t.id));
bind: gs "Toggle page source" viewsource

bind: <C-F10> "Open hamburger menu" xdoclick 1896 115

bind: <C-v> "Enter ignore mode (disable tridactyl bindings)" nmode ignore 1 mode normal
bind: <C-z> "Enter ignore mode for one keybinding (disable tridactyl bindings)" mode ignore

unbind <C-x>
bind: <C-x><C-c> "Close all windows" qall
bind: <C-x><C-x> "Restart browser" restart

bind: <A-=> "Increment current URL by 1" urlincrement 1
bind: <A--> "Decrement current URL by 1" urlincrement -1

" ╭─────────────╮
" │ g; -- focus │
" ╰─────────────╯
commdoc myfocusinput "Focus COUNTth input field"
command myfocusinput jsb -d¦ utils.tri.myfocusinput(JS_ARGS.join(" "))¦
bind: gi "Focus COUNTth input field" myfocusinput

bind g;<C-h> showkeys g;
bind: g;; "Focus tab containing last focused input" changelistjump -1
bind: g;i "Focus nth input on page" focusinput 2
bind: g;b "Focus biggest input field on page" focusinput -b
bind: g;n "Focus input on page after last focused one" focusinput -n
bind: g;N "Focus input on page before last focused one" focusinput -N
bind: g;p "Focus first password input field on page" focusinput -p

" ╭──────────────────╮
" │ general commands │
" ╰──────────────────╯
command: tabopen_adj "Open an URL in an adjacent tab" jsb -p utils.tab.open(JS_ARG, {where: "related"})
commdoc tabopen_bg "Open an URL in an adjacent background tab"
command tabopen_bg jsb -p utils.tab.open(JS_ARG, {where: "related", background: true})
commdoc openorswitchc "Open an URL in current (with count: adjacent) tab, or switch to existing tab"
command openorswitchc jsb -d¦ utils.tab.openOrSwitch(JS_ARGS[1], {where: JS_ARGS[2]?"related":"here"})¦
commdoc tabopenorswitchc "Open an URL in a new final tab (count: current tab), or switch to existing tab"
command tabopenorswitchc jsb -d¦ utils.tab.openOrSwitch(JS_ARGS[1], {where: JS_ARGS[2]?"here":"last"})¦
commdoc openorswitch "Open an URL in current tab, or switch to existing tab"
command openorswitch jsb -p utils.tab.openOrSwitch(JS_ARG, {where:"here"});
commdoc tabopenorswitch "Open an URL in a new (final) tab, or switch to existing tab"
command tabopenorswitch jsb -p utils.tab.openOrSwitch(JS_ARG, {where:"last"});
commdoc tabopenorswitch_adj "Open an URL in an afjacent tab, or switch to existing tab"
command tabopenorswitch_adj jsb -p utils.tab.openOrSwitch(JS_ARG, {where:"related"});
commdoc openorsummon "Open an URL in current tab, or switch to existing tab and move adjacent"
command openorsummon jsb -p utils.tab.openOrSummon(JS_ARG, {where:"here"});
commdoc tabopenorsummon "Open an URL in a new adjacent tab, or switch to existing tab and move adjacent"
command tabopenorsummon jsb -p utils.tab.openOrSummon(JS_ARG, {where:"related"});
commdoc tabopenorsummonbg "Open an URL in a new background adjacent tab, or move existing tab adjacent"
command tabopenorsummonbg jsb -p utils.tab.openOrSummon(JS_ARG, {where:"related", background: true});

command withjs composite js
command withjsb composite jsb
commdoc urltoggle "Toggle a component of the current URL"
command urltoggle cujs -d¦ cutils.urltoggleWrapper(JS_ARGS.join(" "))¦
command: cujs "Load cutils.js and run js" composite js -r cutils.js ; js
command: csites "Load S.js, cutils.js, csites.js, run js" composite js -r cutils.js ; js -r csites.js ; js
command xdo jsb -d¦ tri.controller.acceptExCmd("exclaim_quiet xdotool" + JS_ARGS.join(" "))¦
commdoc xdoclick "Click element at point X Y with button N and return pointer to original position"
command xdoclick jsb -d¦ utils.xdoclickWrapper(JS_ARGS, {return:true})¦
commdoc xdoclick! "Click element at point X Y with button N"
command xdoclick! jsb -d¦ utils.xdoclickWrapper(JS_ARGS)¦
commdoc xdoelem "Use xdotool to move the mouse pointer and act on element"
command xdoelem jsb -d¦ utils.xdoelemWrapper(JS_ARGS.join(" "), {return:true})¦
commdoc xdoelem! "Use xdotool to move the mouse to act on element and return pointer to original position"
command xdoelem! jsb -d¦ utils.xdoelemWrapper(JS_ARGS.join(" "))¦
commdoc pastef "Takes a format string and replaces ${S} with clipboard contents; used to pipe to another command"
command pastef composite jsb -p tri.excmds.getclip().then(s=>JS_ARG.replace(/\$\{s\}/g, s))
commdoc expaste "Execute commands in clipboard"
command expaste jsb utils.cbread().then(s=>s.split("\n").forEach(c=>tri.controller.acceptExCmd(c)));
commdoc exclaim_ "Run commands in /bin/sh and print the result on the command line"
command exclaim_ jsb -d¦ apps.exclaim_(JS_ARGS)¦
command !! exclaim_

" ╭───────────╮
" │ b -- tabs │
" ╰───────────╯
unbind b

command: tabremove "Close tabs matching string" jsb -p utils.tab.remove(t=>(S.matchSmartCase(JS_ARG, t.url)));
command: tabfilter "Close tabs not matching string" jsb -p utils.tab.filter(t=>(S.matchSmartCase(JS_ARG, t.url)));
commdoc tabswitchprev "Switch to last accessed tab"
command tabswitchprev jsb -d¦ utils.tab.switchAlternate(JS_ARGS[1]||1)¦
commdoc tabswitchprev! "Switch to last accessed tab and close current tab" 
command tabswitchprev! jsb -d¦ utils.tab.switchAlternate(JS_ARGS[1]||1, {removeCurrent: true})¦
command: tabsummon "Move tab adjacent to current tab" jsb -p utils.tab.summon(JS_ARG||"$")
commdoc tabsummonalt "Move last accessed tab adjacent to current tab"
command tabsummonalt jsb -d¦ utils.tab.summonAlternate(JS_ARGS[1]||1)¦
command: tabmove! "Move current tab to specified tab number" jsb -p utils.tab.move(JS_ARG);
command tabmovetoalt jsb -d¦ utils.tab.moveToAlternate(JS_ARGS[1]||1)¦

bind: g;h "Choose entry in tab's backward history" xdoclick 275 114 3
bind: g;l "Choose entry in tab's forward history" xdoclick 313 114 3
bind: <C-a> "Switch to first tab" tabfirst
bind: <C-e> "Switch to last tab" tablast

bind b<C-h> showkeys b
bind: bb "Switch to tab from completion list" fillcmdline tab
bind: bo "Open in adjacent tab" fillcmdline tabopen_adj
bind: bO "Open in adjacent background tab" fillcmdline tabopen_bg
bind: bp "Pin/unpin tab" pin
bind: b> "Close all tabs to the right" tabclosealltoright
bind: b< "Close all tabs to the left"  tabclosealltoleft

" | bd -- tabs/delete |
bind bd<C-h> showkeys bd
bind: bdm "Close tabs matching string" fillcmdline tabremove
bind: bd;m "Close tabs not matching string" fillcmdline tabfilter
bind: bdo "Close other tabs" tabonly
bind: bds "Select tabs to close with rofi" jsb utils.tab.removeWithRofi();
bind: bd;s "Select tabs to keep with rofi; close others" jsb utils.tab.removeWithRofi({invert:true});

" | bm -- tabs/move |
bind bm<C-h> showkeys bm
bind: bma "move active tab after alternate tab" tabmovetoalt
bind: bmA "move alternate tab after active tab" tabsummonalt
bind: bmm "move tab to position" fillcmdline tabmove!
bind: bms "move tab after active tab" fillcmdline tabsummon
bind: bm> "move tab to start (first nonpinned position)" tabmove 0
bind: bm< "move tab to end" tabmove 1

" | br -- tabs/reload |
bind br<C-h> showkeys br
bind: bra "Reload all tabs" reloadall
bind: brd "Reload dead tabs" reloaddead
bind: bra "Reload all tabs except current" reloadallbut
bind: brr "Reload COUNT tabs" reload
bind: brR "Reload COUNT tabs and bypass cache" reloadhard

bind: C "Duplicate tab" tabduplicate
bind: <C-k> "Close all tabs to the right inclusive" composite tabclosealltoright ; tabclose
bind: <C-K> "Close all tabs to the left inclusive"  composite tabclosealltoleft  ; tabclose
bind: <A-;> "Switch to last accessed tab" tabswitchprev
bind: <A-:> "Switch to last accessed tab and close current tab" tabswitchprev!

bind: <AC-1> "Move tab to position 1" tabmove! 1
bind: <AC-2> "Move tab to position 2" tabmove! 2
bind: <AC-3> "Move tab to position 3" tabmove! 3
bind: <AC-4> "Move tab to position 4" tabmove! 4
bind: <AC-5> "Move tab to position 5" tabmove! 5
bind: <AC-6> "Move tab to position 6" tabmove! 6
bind: <AC-7> "Move tab to position 7" tabmove! 7
bind: <AC-8> "Move tab to position 8" tabmove! 8
bind: <AC-9> "Move tab to position 9" tabmove! 9
bind: <AC-0> "Move tab to final position" tabmove! 0
bind: <AC-h> "Move tab one position to right" tabmove -1
bind: <AC-l> "Move tab one position to left"  tabmove +1

" ╭─────────────────────╮
" │ w -- window/browser │
" ╰─────────────────────╯
unbind w

commdoc copyuserchrome "Copy userChrome.js from .tridactyl/css to default profile"
command copyuserchrome ! cp -v ~/.tridactyl/css/userChrome.css `echo ~/.mozilla/firefox/*.default`
command: rmuserchrome "Remove userChrome.js from default profile" ! rm ~/.mozilla/firefox/*.default/userChrome.css
commdoc bmrofi "[WHERE? BG? OPTS?] Open bookmark via rofi"
command bmrofi jsb -d¦ apps.bmrofi(JS_ARGS)¦
" note: The :history command can usually only take a count of about 5 (ie prev 5 days history)
"       this seems to be due to a limit on how much can be sent to the native client
"       The :historysearch command takes a search term to filter input *first*, so it can be
"       used for searching over a longer time range
command history jsb -d¦ utils.openHistoryItemsWrapper(JS_ARGS)¦
command historysearch jsb -d¦ utils.openHistorySearchWrapper(JS_ARGS)¦

bind wc fillcmdline wincloseindex
bind: wm "Toggle mute tab" mute toggle
bind: wM "Mute all tabs" mute all
bind: wr "Reload tridactylrc file" source ~/.tridactyl/tridactylrc
bind: wu "Undo window" undo window
bind: ww "Open URL in new window" fillcmdline winopen
bind: wx "dismiss update notification" xdo mousemove 1740 230 click 1

" | wk -- browser/bookmarks |
bind wk<C-h> showkeys wk
bind: wkk "Open bookmark in last tab [Rofi]" bmrofi
bind: wka "Open bookmark in adjacent tab [Rofi]" bmrofi related
bind: wkb "Open bookmark in background adjacent tab [Rofi]" bmrofi related t
bind: wko "Open bookmark in current tab [Rofi]" bmrofi here

" | wh -- browser/history |
bind: whh "Open history item in last tab [rofi]" history last false
bind: wha "Open history item in adjacent tab [rofi]" history related false
bind: whb "Open history item in adjacent background tab [rofi]" history related true
bind: who "Open history item in current tab [rofi]" history here false

" | ws -- browser/style |
bind: wsu "Copy userChrome.css from .tridactyl/css to default profile directory" copyuserchrome
bind: wsU "Copy userChrome.css and restart browser" composite copyuserchrome ; restart

" | wt -- browser/toggle |
bind: wtd "toggle downloads menu" xdoclick 241 111
bind: wtt "toggle bookmarks toolbar" xdo key ctrl+B
bind: wtm "toggle menu bar" xdo key alt+v; sleep 0.5; xdotool key Right; sleep 0.5; xdotool key Return

" ╭─────────────╮
" │ s -- search │
" ╰─────────────╯
unbind s
unbind /

commdoc kwsearch "Keyword bookmark search in last tab"
command kwsearch jsb -d¦ apps.kwsearch(JS_ARGS)¦
commdoc kwsearch_adj "Keyword bookmark search in adjacent tab"
command kwsearch_adj jsb -d¦ apps.kwsearch(JS_ARGS, {where: "related"})¦
commdoc kwsearch_bg   "Keyword bookmark search in background adjacent tab"
command kwsearch_bg   jsb -d¦ apps.kwsearch(JS_ARGS, {where: "related", background: true})¦
commdoc kwsearch_here "Keyword bookmark search in current tab"
command kwsearch_here jsb -d¦ apps.kwsearch(JS_ARGS, {where: "here"})¦
commdoc kwrofi "Keyword bookmark search in current tab [Rofi]"
command kwrofi jsb -d¦ apps.kwrofi(JS_ARGS)¦
commdoc multisearch "Search multiple queries"
command multisearch jsb -d¦ apps.multipleQuerySearch(JS_ARGS)¦
commdoc multienginesearch "Search multiple engines with same query"
command multienginesearch jsb -d¦ apps.multipleEngineSearch(JS_ARGS)¦
commdoc multisearch_adj "Search multiple queries in adjacent tabs"
command multisearch_adj jsb -d¦ apps.multipleQuerySearch(JS_ARGS, {where: "related"})¦
commdoc multienginesearch_adj "Search multiple engines with same query in adjacent tabs"
command multienginesearch_adj jsb -d¦ apps.multipleEngineSearch(JS_ARGS, {where: "related"})¦

bind s<C-h> showkeys s

" | sh -- search history |
bind sh<C-h> showkeys sh
bind: shh "Search history, open item(s) in last tab [rofi]" historysearch last false
bind: sha "Search history, open item(s) in adjacent tab [rofi]" historysearch related false
bind: shb "Search history, open item(s) in adjacent background tab [rofi]" historysearch related true
bind: sho "Search history, open item in current tab [rofi]" historysearch here false

" | sk -- search by bookmark keyword  |
bind sk<C-h> showkeys sk
bind: skb "Bmark keyword search: background adjacent tab" fillcmdline kwsearch_bg
bind: skk "Bmark keyword search: adjacent tab" fillcmdline kwsearch_adj
bind: skl "Bmark keyword search: last tab" fillcmdline kwsearch
bind: sko "Bmark keyword search: current tab" fillcmdline kwsearch_here
bind: s;kb "Bmark keyword search: background adjacent tab [Rofi]" ! kwsearch -Sw|sed -r 's/.*/kwsearch_bg \0/'
bind: s;kk "Bmark keyword search: adjacent tab [Rofi]" ! kwsearch -Sw|sed -r 's/.*/kwsearch_adj \0/'
bind: s;kl "Bmark keyword search: last tab [Rofi]" ! kwsearch -Sw|sed -r 's/.*/kwsearch \0/'
bind: sks "Bmark keyword search: last tab [Rofi]" fillcmdline kwrofi

" | sm -- search multiple |
bind sm<C-h> showkeys sm
bind: smm "Search multiple queries: adjacent tab" fillcmdline multisearch_adj
bind: smM "Search multiple queries" fillcmdline multisearch
bind: sme "Search multiple engines: adjacent tab" fillcmdline multienginesearch_adj
bind: smE "Search multiple engines" fillcmdline multienginesearch
bind: s;mm "Search multiple queries: adjacent tab" ! kwsearch --kw-completion|sed -r 's/.*/multisearch_adj \0/'
bind: s;mM "Search multiple queries" ! kwsearch --kw-completion|sed -r 's/.*/multisearch \0/'
bind: s;me "Search multiple engines: adjacent tab" ! echo -n "multienginesearch "; kwsearch --kw-completion --multi
bind: s;mE "Search multiple engines" ! echo -n "multienginesearch_adj "; kwsearch --kw-completion --multi

bind ss fillcmdline open search
bind s/ fillcmdline find

bind n findnext
bind N findnext
bind ? fillcmdline find -?
bind <C-/> clearsearchhighlight

" */#: Temporary implementation using find
" TODO: implement these properly with forwards/backwards cycling
bind * js tri.controller.acceptExCmd(`find ${window.getSelection()+""}`);
bind # js tri.controller.acceptExCmd(`find -? ${window.getSelection()+""}`);

" ╭───────────────╮
" │ <C-h> -- help │
" ╰───────────────╯
command showkeys fillcmdline_notrail bind
command showkeysurl fillcmdline_notrail bindurl
command searchnmaps jsb -d¦ utils.tri.searchNmapsWrapper(JS_ARGS.join(" "))¦

bind <C-h><C-h> showkeys <C-h>
bind <C-h>h fillcmdline help
bind <C-h>b fillcmdline searchnmaps
bdoc <C-h>f "Firefox Keyboard Shortcuts"
bind <C-h>f tabopenorswitchc https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly
bind <C-h>d tabopen about:devtools-toolbox?id=tridactyl.vim.betas%40cmcaine.co.uk&type=extension
bind <C-h>i tabopen moz-extension://926899c1-24a3-4569-9789-2f53b837f92e/static/docs/globals.html
bind <C-h>k fillcmdline bind
bind <C-h>K tabopenorswitchc https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
bind <C-h>u fillcmdline bindurl
bdoc <C-h>x "xdotool keycodes"
bind <C-h>x tabopenorswitchc https://gitlab.com/cunidev/gestures/-/wikis/xdotool-list-of-key-codes

" ╭───────────╮
" │ y -- yank │
" ╰───────────╯
commdoc bmyank "Yank bookmark data from bookmarks.json file"
command bmyank jsb -d¦ apps.bmyank(JS_ARGS, "")¦
commdoc yankmousepos "Yank the mouse pointer position (X Y)"
command yankmousepos ! echo "yank $(xdotool getmouselocation | perl -pe 's/x:(\d+) y:(\d+) .*/$1 $2/')";
commdoc yankall "Copy text from elements matching a selector"
command yankall cujs -d¦ yankby(JS_ARGS.join(" "))¦
command yankfirst cujs -d¦ yankby(JS_ARGS.join(" "), {firstMatch: true})¦

bind y<C-h> showkeys y
bdoc y? "Yank the current tridactyl config as JSON"
bind y? jsb tri.excmds.yank(JSON.stringify(tri.config.USERCONFIG))

bind: yf "Yank element text by CSS selector (first match)" fillcmdline yankfirst
bind: ym "Yank the current mouse position [X Y]" yankmousepos
bind: ys "Yank element text by CSS selector (all)" fillcmdline yankall
bind: yS "Yank element text by CSS selector [HINT]" fillcmdline hint -p -c

" | yk -- yank/bookmarks |
bind yk<C-h> showkeys yk
bind: ykk "Yank bookmark data from bookmarks.json file" fillcmdline bmyank
bind: ykK "Yank keyword bookmark URL" fillcmdline bmyank -K
bind: yks "Yank bookmark URL with rofi kfrom bookmarks.json file" bmyank -s -u
bind: ykS "Yank keyword bookmark URL with rofi from bookmarks.json file" fillcmdline bmyank -S -u

" | yx -- yank/text |
bind yx<C-h> showkeys yx
bind: yxp "Yank paragraph/heading" hint -p -c p,code,h1,h2,h3,h4,h5,h6,output,table
bind: yxs "Yank spans of text, code etc" hint -p -c span,code,a,tr,cite,data,dd,dt,em,strong,u,sub,sup,ruby,output
bind: yxx "Yank page text" withcutils yankelt("body")

" ╭───────────╮
" │ e -- goto │
" ╰───────────╯
bind e<C-h> showkeys e
bind ea tabopen about:addons

" | eb -- goto/sidebar |
bind: ebh "Open history sidebar" xdo key ctrl+v ctrl+h
bind: ebk "Open bookmarks sidebar" xdo key ctrl+v ctrl+b

bind ec tabopen about:config
bind ed tabopen about:downloads
bind eD tabopen about:debugging

" | el -- goto/local |
bind el<C-h> showkeys el
bind eldw  tabopenorswitchc file:///home/troy/Downloads
bind eldc  tabopenorswitchc file:///home/troy/Documents

" | el -- goto/local/ebooks |
bind el<C-h> showkeys el
bind ele/  tabopenorswitchc file:///home/troy/ebooks
bind elec  tabopenorswitchc file:///home/troy/ebooks/coding
bind eled  tabopenorswitchc file:///home/troy/ebooks/dl
bind elel  tabopenorswitchc file:///home/troy/.readinglist
bind eles  tabopenorswitchc file:///home/troy/ebooks/cs
bind elea  tabopenorswitchc file:///home/troy/ebooks/articles

" | el -- goto/local/home |
bind el<C-h> showkeys el
bind elhe  tabopenorswitchc file:///home/troy/.emacs.d/private
bind elhh  tabopenorswitchc file:///home/troy
bind elhp  tabopenorswitchc file:///home/troy/.pentadactyl
bind elhr  tabopenorswitchc file:///home/troy/repos
bind elhs  tabopenorswitchc file:///home/troy/source
bind elht  tabopenorswitchc file:///home/troy/.tridactyl

" | el -- goto/local/opt |
bind el<C-h> showkeys el
bind elo/  tabopenorswitchc file:///opt
bind eloc  tabopenorswitchc file:///opt/chrome-extensions
bind elod  tabopenorswitchc file:///opt/deb
bind elof  tabopenorswitchc file:///opt/ff-addons
bind elos  tabopenorswitchc file:///opt/scripts
bind elou  tabopenorswitchc file:///opt/userscripts
bind eloU  tabopenorswitchc file:///opt/userstyles
bind elow  tabopenorswitchc file:///opt/webapps

" | el -- goto/local/pictures |
bind el<C-h> showkeys el
bind elp/   tabopenorswitchc file:///home/troy/Pictures
bind elpa   tabopenorswitchc file:///home/troy/Pictures/art
bind elpd   tabopenorswitchc file:///home/troy/Pictures/downloads
bind elpv   tabopenorswitchc file:///home/troy/Pictures/vlc-snapshot

" | el -- goto/local/usr |
bind el<C-h> showkeys el
bind elud   tabopenorswitchc file:///usr/share/doc/
bind eluld  tabopenorswitchc file:///usr/local/share/doc/

" | ew -- goto/window |
bind: ewh "Open history window" xdo key ctrl+v ctrl+H
bind: ewd "Open downloads manager" xdo key ctrl+v ctrl+Y
bind: ewk "Open bookmarks manager" xdo key ctrl+v ctrl+O

" | ey -- goto/dactyl |
bind eyss fillcmdline_notrail tabopenorswitchc https://github.com/tridactyl/tridactyl/tree/master/src/

command gotoCommandSource jsb -p utils.tri.gotoCommandSource(JS_ARG);

bind es tabopen about:support
bind etc fillcmdline gotoCommandSource

" ╭───────────╮
" │ a -- apps │
" ╰───────────╯
command: withurl "Pass current URL into command" composite get_current_url |
command googletranslatepage jsb -d¦ apps.trans.page.google(...JS_ARGS)¦
command bingtranslatepage jsb -d¦ apps.trans.page.bing(...JS_ARGS)¦

unbind a
bind a<C-h> showkeys a
bind: ac "Open URL in Google Chrome" withurl ! /usr/local/bin/google-chrome
bind: af "Open URL in Waterfox" withurl ! /opt/waterfox/waterfox --new-tab
bdoc aw "Toggle wayback machine"
bind aw urltoggle https://web.archive.org/web/https: https: https?://web.archive.org/web/[^:]+/https?: https?:

" | a; -- apps/hints |
bind a;<C-h> showkeys a;
bind: a;c "Open link in Google Chrome" composite hint -pipe a href | ! /usr/local/bin/google-chrome
bind: a;f "Open link in Waterfox" composite hint -pipe a href | ! /opt/waterfox/waterfox

" | at -- apps/translate |
command trans jsb -d¦ apps.trans.transsh(JS_ARGS)¦

bind: att "Translate text in command line: [sl:tl] TEXT" fillcmdline trans

" | atp -- apps/translate/page |
bind: atpp "Google translate page" googletranslatepage
bind: atpb "Bing translate page" bingtranslatepage

" ╭─────────────────╮
" │ x -- extensions │
" ╰─────────────────╯
bind x<C-h> showkeys x

" | xr -- rikairebuilt |
bind xr<C-h> showkeys xr
" rikairebuilt toggle
bind: xrr "Toggle rikairebuilt" xdoclick 1861 111
abind: <A-F1> "Toggle rikairebuilt" xdoclick 1861 111
" addon page
bind xra tabopenorswitchc https://addons.mozilla.org/en-GB/firefox/addon/rikaihan/
" source page
bind xrs tabopenorswitchc https://github.com/Garethp/RikaiRebuilt
" config page
bind xrc winopen moz-extension://41d2b8bf-2a97-4468-87c8-f6243594c04c/options/options.html

" ╭─────────────╮
" │ , -- leader │
" ╰─────────────╯
bind ,<C-h> showkeys ,

" ╭───────────╮
" │ ,a -- web │
" ╰───────────╯
bind: ,a<C-h> showkeys ,a
bind: ,ab "Open banking" withjsb user.bankurl | tabopenorswitchc
bind: ,ac "Open Google calendar" tabopenorswitch https://calendar.google.com/calendar/u/0/r/month
bind: ,ap "Open Paypal" tabopenorswitchc https://www.paypal.com/myaccount/home
bind: ,ay "Open MyGov" tabopenorswitchc https://my.gov.au/LoginServices/main/login?execution=e1s1

" ╭──────────────────────────╮
" │ ,am -- web/mail+contacts │
" ╰──────────────────────────╯
bind ,am<C-h> showkeys ,am
bind: ,amc "Open Google Contacts" tabopenorswitchc https://contacts.google.com/?hl=en&tab=mC
bind: ,amC "Open Gmail Contacts (basic)" tabopenorswitchc https://mail.google.com/mail/u/0/h/k4067n2i55u9/?&v=cl
bind: ,amm "Open Gmail (basic)" tabopenorswitchc https://mail.google.com/mail/u/0/h/1f0xqcpo2pdl3/?f=1
bind: ,amM "Open Gmail" tabopenorswitchc https://mail.google.com/mail/u/0/#inbox
bind: ,amy "Open Yahoo Mail" tabopenorswitchc https://au.mail.yahoo.com/d/folders/1

" ╭─────────────────────╮
" │ ,as -- web/shopping │
" ╰─────────────────────╯
bind: ,asa "open Amazon AU" tabopenorswitch https://www.amazon.com.au/gp/cart/view.html/ref=nav_cart
bind: ,asc "Open Coles" tabopenorswitch https://shop.coles.com.au/a/ballina/home
bind: ,ase "open eBay" tabopenorswitch https://cart.ebay.com.au
bind: ,asj "open Jackson's Art" tabopenorswitch https://www.jacksonsart.com/en-au/checkout/cart/
bind: ,asl "Open liquor specials" jsb utils.tab.openMultiple(sites.LISTS.liquor_specials, {background:true});
bind: ,asp "Open Paypal" tabopenorswitch https://www.paypal.com/myaccount/home
bind: ,asw "Open Woolworths" tabopenorswitch https://www.woolworths.com.au/shop/mylists

" ╭───────────────╮
" │ ,av -- web/AV │
" ╰───────────────╯
bind ,av<C-h> showkeys ,av
bind: ,ava "AccuRadio Classical" tabopenorswitchc https://www.accuradio.com/classical/
bind: ,avd "Open Disney Plus" tabopenorswitchc https://www.disneyplus.com/en-gb/home
bind: ,avn "Open Netflix" tabopenorswitchc https://www.netflix.com/
bind: ,avp "Goto Amazon Prime Video" tabopenorswitchc https://www.primevideo.com/storefront/home/ref=atv_nb_logo
bind: ,avy "Goto Youtube" tabopenorswitchc https://www.youtube.com/

" ╭────────────────────╮
" │ ,aw -- web/weather │
" ╰────────────────────╯
bind ,aw<C-h> showkeys ,aw
" Show Goonellabah Sunrise and Sunset Times
bind ,aws jsb var [sr,ss]=apps.sunriseSunset(...user.latlong); utils.yank(`SUNRISE: ${sr}\nSUNSET:  ${ss}`);
" Open Lismore Weather (BoM)
bind ,aww tabopenorswitchc http://www.bom.gov.au/nsw/forecasts/lismore.shtml
" Open Goonellabah Weather (timeanddate.com)
bind ,awt tabopenorswitchc https://www.timeanddate.com/weather/@2164966

" ╭────────────────────╮
" │ ,c -- command-line │
" ╰────────────────────╯
commdoc cmdYankHistoryItem "Yank the Nth last command-line history item"
command cmdYankHistoryItem jsb -d¦ utils.tri.cmdYankHistory(utils.tri.parseArgs(JS_ARGS))¦
commdoc cmdYankHistoryItems "Yank the last N command-line history items"
command cmdYankHistoryItems jsb -d¦ utils.tri.cmdYankHistoryLastN(JS_ARGS[1]||1)¦

bind: ! "Open command line with exclaim command" fillcmdline !!

bind ,c<C-h> showkeys ,c
bind: ,cc "Yank the Nth last command-line history item" cmdYankHistoryItem
bind: ,cC "Yank the last N command-line history items" cmdYankHistoryItems
bind: ,cp "Execute commands in clipboard" expaste
bdoc ,cr "Open command-line with previous command, replacing first argument"
bind ,cr composite fillcmdline_notrail ; ex.prev_history ; text.beginning_of_line ; text.forward_word ; text.kill_word

" ╭───────────────────────╮
" │ ,e -- javascript eval │
" ╰───────────────────────╯
commdoc jse "Eval expression and display in a message box"
command jse composite js -r cutils.js ; js -d¦ alert(eval(JS_ARGS.join(" ")))¦
commdoc jse "Eval expression to obtain object and display its properties in a message box"
command getproperties js -d¦ alert(Object.getOwnPropertyNames(eval(JS_ARGS.join(" "))).join("\n"))¦
commdoc jsbe "Eval expression and display in commandline"
command jsbe jsb -d¦ tri.excmds.jsb(`tri.excmds.fillcmdline_nofocus(${JS_ARGS.join(" ")})`)¦
commdoc jsbm "Eval expression and display in a message box"
command jsbm jsb -d¦ tri.excmds.jsb(`utils.msg(${JS_ARGS.join(" ")})`)¦
commdoc jse "Find elements matching selector and display in a message box"
command getselector js -d¦ alert([...document.querySelectorAll(JS_ARGS.join(" "))].map(t=>t.tagName+"\t"+t.innerText.slice(0,50).replace("\n","\t")).join("\n"))¦

bind ,e<C-h> showkeys ,e
bind ,eb fillcmdline jsbm
bind ,ec js -r cutils.js
bind ,ee fillcmdline jse
bind ,ej fillcmdline cujs
bind ,ep fillcmdline getproperties
bind ,es fillcmdline getselector

" ╭────────────────╮
" │ ,j -- japanese │
" ╰────────────────╯
bind ,j<C-h> showkeys ,j
" Jisho kanji search (hints)
bind ,jf js window._dactylargs=[jishoKanjiSearch]; hints.show('カ');
" Jisho search (clipboard)
bind ,jj fillcmdline tabopenorswitchc http://jisho.org/search/

" | ,jk -- kanji |
bind ,jk<C-h> showkeys ,jk
" Google Translate handwritten input
bind ,jkh tabopenorsummon https://translate.google.com.au/#ja/en/
" Jisho kanji search (clipboard)
bind ,jkp pastef http://jisho.org/search/${s}%20%23kanji | tabopenorswitchc
" Jisho kanji radical search
bind ,jkr tabopenorswitchc https://jisho.org/#radical
" Visual Kanji Search - similar kanji (clipboard)
bind ,jkv pastef https://thekanjimap.com/index.html?k=${s} | tabopenorswitchc

" ╭─────────────────╮
" │ ,r -- reference │
" ╰─────────────────╯
command wpeplist jsb -d¦ sites.wp.episodeList(JS_ARGS.join(" "))¦

" | ,rw -- wikipedia |
bind ,rwe fillcmdline wpeplist

" ╭───────────────╮
" │ ,t -- toggles │
" ╰───────────────╯
bind ,t<C-h> showkeys ,t
bind: ,ts "Toggle HTTPS:" urltoggle https:// http://
bind: ,tu "Toggle URL component" urltoggle
bind: ,t- "Toggle URL spaces <-> dashes" urltoggle %20 -
bind: ,tj "Toggle URL en <-> ja" urltoggle /en. /ja.

" ╭──────────────────╮
" │ ,v -- conversion │
" ╰──────────────────╯
command convertunits jsb -d¦ apps.convertUnits(JS_ARGS).then(s=>tri.excmds.fillcmdline_nofocus(s))¦
bind ,vv fillcmdline convertunits

command copytablecols withjs -r cutils.js ; js -d¦ tri.controller.acceptExCmd(`hint -c table -F t=>cutils.yank(cutils.extractTableColumns(t, [${JS_ARGS.slice(1).join(",")}]), {useAlert:true})`)¦
command copytablecols_strict withjs -r cutils.js ; js -d¦ tri.excmds.fillcmdline(`hint -c table -F t=>cutils.yank(cutils.extractTableColumns(t, [${JS_ARGS.slice(1).join(",")}], {strict:true}), {useAlert:true})`)¦

" ╭─────────────────────╮
" │ ,x -- miscellaneous │
" ╰─────────────────────╯
bind ,x<C-h> showkeys ,x
bind ,xt<C-h> showkeys ,xt
bind ,xtc fillcmdline copytablecols
bind ,xtC fillcmdline copytablecols_strict

" ╭─────────────╮
" │ ,, -- hints │
" ╰─────────────╯
bind ,,<C-h> showkeys ,,
bind ,,c hint -c [class*="expand"],[class="togg"]

" middle and right click using xdotool
bind ,,x xdoelem -e click 2
bind ,,m xdoelem -e click 3

" ╭──────────────────────────────────────────────────╮
" │ ,,f -- numeric hints: allow alphabetic filtering │
" ╰──────────────────────────────────────────────────╯
bind ,,f<C-h> showkeys ,,f
bind ,,fb  composite set hintchars 0123456789 ; hint -b ; unset hintchars
bind ,,ff  composite set hintchars 0123456789 ; hint ; unset hintchars
bind ,,ft  composite set hintchars 0123456789 ; hint -t ; unset hintchars

" ╭───────╮
" │ marks │
" ╰───────╯
jsb utils.tri.generateMarkBindings();

" ───────────────────────────────────────────────────────────────────────────────
" ╭──────────────────────────────────╮
" │ ex/insert/input-mode keybindings │
" ╰──────────────────────────────────╯

" src/libs/editor.ts
bind --mode=ex      <C-a>    text.beginning_of_line
bind --mode=insert  <C-a>    text.beginning_of_line
bind --mode=input   <C-a>    text.beginning_of_line
bind --mode=ex      <C-e>    text.end_of_line
bind --mode=insert  <C-e>    text.end_of_line
bind --mode=input   <C-e>    text.end_of_line
bind --mode=ex      <C-f>    text.forward_char
bind --mode=insert  <C-f>    text.forward_char
bind --mode=input   <C-f>    text.forward_char
bind --mode=ex      <C-b>    text.backward_char
bind --mode=insert  <C-b>    text.backward_char
bind --mode=input   <C-b>    text.backward_char
bind --mode=ex      <C-k>    text.kill_line
bind --mode=insert  <C-k>    text.kill_line
bind --mode=input   <C-k>    text.kill_line
bind --mode=ex      <C-u>    text.backward_kill_line
bind --mode=insert  <C-u>    text.backward_kill_line
bind --mode=input   <C-u>    text.backward_kill_line
bind --mode=ex      <C-l>    text.delete_char
bind --mode=insert  <C-l>    text.delete_char
bind --mode=input   <C-l>    text.delete_char
bind --mode=ex      <C-d>    text.delete_char
bind --mode=insert  <C-d>    text.delete_char
bind --mode=input   <C-d>    text.delete_char
bind --mode=ex      <C-h>    text.delete_backward_char
bind --mode=insert  <C-h>    text.delete_backward_char
bind --mode=input   <C-h>    text.delete_backward_char
bind --mode=ex      <C-y>    composite getclip selection | text.insert_text
bind --mode=insert  <C-y>    composite getclip selection | text.insert_text
bind --mode=input   <C-y>    composite getclip selection | text.insert_text
ibind: <A-;> "Switch to last accessed tab" tabswitchprev
ibind: <A-:> "Switch to last accessed tab and close current tab" tabswitchprev!

" src/libs/commandline_cmds.ts
bind --mode=ex  <C-n>      ex.next_history
bind --mode=ex  <C-p>      ex.prev_history
bind --mode=ex  <Tab>      ex.next_completion
bind --mode=ex  <S-Tab>    ex.prev_completion
bind --mode=ex  <C-/>      ex.deselect_completion
bind --mode=ex  <A-w>      ex.execute_ex_on_completion clipboard yank
cbind: <A-;> "Switch to last accessed tab" tabswitchprev
cbind: <A-:> "Switch to last accessed tab and close current tab" tabswitchprev!

bind --mode=insert  <C-m>    withjsb user.email      | text.insert_text
bind --mode=insert  <C-M>    withjsb user.email2     | text.insert_text
bind --mode=insert  <C-I>    withjsb user.name       | text.insert_text
bind --mode=insert  <C-T>    withjsb user.firstname  | text.insert_text
bind --mode=insert  <C-L>    withjsb user.lastname   | text.insert_text
bind --mode=insert  <C-A>    withjsb user.street     | text.insert_text
bind --mode=insert  <C-S>    withjsb user.suburb     | text.insert_text
bind --mode=insert  <C-D>    withjsb user.address    | text.insert_text
bind --mode=insert  <C-P>    withjsb user.phone      | text.insert_text
bind --mode=insert  <C-B>    withjsb user.mobile     | text.insert_text
bind --mode=insert  <C-Z>    withjsb user.postcode   | text.insert_text
bind --mode=insert  <C-Q>    withjsb user.masterpw   | text.insert_text
bind --mode=insert  <C-C>    withjsb user.creditcard | text.insert_text

" ───────────────────────────────────────────────────────────────────────────────
" ╭──────────────────────╮
" │ Visual-mode bindings │
" ╰──────────────────────╯
vbind Y cujs cutils.yank(window.getSelection().toString())

vbind: <A-;> "Switch to last accessed tab" tabswitchprev
vbind: <A-:> "Switch to last accessed tab and close current tab" tabswitchprev!

" ───────────────────────────────────────────────────────────────────────────────
" ╭──────────╮
" │ Finalize │
" ╰──────────╯
fillcmdline_nofocus tridactylrc: FINISHED