#!/bin/sh

# ───────────────────────────────────────────────────────────────────────────────
# ╭────────────╮
# │            │
# │  KWSEARCH  │
# │            │
# ╰────────────╯

# ╭───────────╮
# │ variables │
# ╰───────────╯
unset kw
bmfile="${BMARKFILE:-$HOME/bookmarks/bookmarks.json}"

# selection vars
regex=
kwonly=
protocol=
# rofi vars
rofi=
rofitheme='#window {width: 80%;} #listview {lines: 25;}';
rofifilter=
multi=
case="-i"
# output vars
args=
oformat=
oneline=
yank=

tempd=`mktemp -d`;

# ╭─────────╮
# │ options │
# ╰─────────╯
SHORT="f:,h,I,J,k,K:,m,o:,p:,r:,R:,s,S,u,w,y,Y,1"
LONG="folder:,help,case-sensitive,js-only,keyword-only,find-keyword:,multi-select,output-format:,protocol:,
  regex:,rofi-filter:,select,select-keyword,url,kw,yank,yank-only,one-line"
PARSED=$(getopt -a -n kwsearch --options "$SHORT" --longoptions "$LONG" -- "$@")

eval set -- "$PARSED"

while :
do
    case "$1" in
        (-h | --help)
            cat <<'EOF'
USAGE: kwsearch [OPTION...]
       kwsearch [-k] [-m|-s] [-y] [SEARCHTERM...]
       kwsearch [-K KW] [-y] [SEARCHTERM...]
    Access keyword (and other) bookmarks from bookmarks.json file. The bookmarks
    file can specified with the environment variable BMARKFILE.
    If SEARCHTERMs are specified, resolve search bookmarks by replacing %s with
    the SEARCHTERMs (escaping not yet supported).

Options:
  -f RE  --folder RE          restrict results to folders matching regex RE (jq regex)
  -h     --help               show help
  -I     --case-sensitive     make Rofi case-sensitive
  -J     --js-only            javascript: URI (bookmarklets) only
  -k     --keyword-only       keyword bookmarks only
  -K KW  --find-keyword KW    find bookmark with keyword KW
  -m     --multi-select       choose multiple bookmarks with Rofi
  -o F   --output-format      specify output format F (url, kw, tri, json)
                                  url: output uri only
                                  kw: output keyword only (implies --keyword-only)
                                  tri: format as tridactyl searchurl setting (implies --keyword-only)
                                  json: force JSON output
  -p P   --protocol P         specify the protocol (or scheme) P: of URIs as regex
  -r RE  --regex RE           filter bookmarks with RE
  -R RE  --filter RE          filter Rofi selection with input regex RE (implies --select)
  -s     --select             choose bookmark with Rofi
  -S     --select-keyword     choose bookmark keyword with Rofi (implies --keyword-only)
  -u     --url                print URL only (equivalent to `-o url`)
  -w     --kw                 print keyword only (implies --keyword-only, equivalent to `-o kw`)
  -y     --yank               copy output to clipboard
  -Y     --yank-only          send output to clipboard, no output
  -1     --one-line           display output on a single line
EOF
            exit 0
            ;;
        (-f | --folder) folder="$2"; shift 2; ;;
        (-I | --case-sensitive) case=""; shift; ;;
        (-J | --js-only) protocol="javascript"; shift; ;;
        (-k | --keyword-only) kwonly=t; shift; ;;
        (-K | --find-keyword) kw="$2"; shift 2; ;;
        (-m | --multi-select) rofi=${rofi:-t}; multi="-multi-select"; shift; ;;
        (-o | --output-format)
            oformat="$2";
            if [ "$oformat" = "kw" ] || [ "$oformat" = "tri" ]; then
                kwonly=t;
            fi;
            shift 2; ;;
        (-p | --protocol) protocol="$2"; shift 2; ;;
        (-r | --regex) regex="$2"; shift 2; ;;
        (-R | --rofi-filter) rofi=${rofi:-t}; rofifilter="$2"; shift 2; ;;
        (-s | --select) rofi=${rofi:-t}; shift; ;;
        (-S | --select-keyword) kwonly=t; rofi=kw; shift; ;;
        (-u | --url) oformat=url; shift; ;;
        (-w | --kw) oformat=kw; kwonly=t; shift; ;;
        (-y | --yank) yank=t; shift; ;;
        (-Y | --yank-only) yank=only; shift; ;;
        (-1 | --one-line) oneline=t; shift; ;;
        (--) shift; break ;;
        (*)  echo "unrecognized option: $1" >&2 ; exit 1; ;;
    esac
done

# handle additional arguments
if [ $# -gt 0 ]; then args=t; fi;

# output format defaults to url when -K or arguments
if [ -n "$kw$args" ]; then oformat=${oformat:-url}; fi;

# adjust rofifilter for -S
if [ "$rofi" = kw ]; then rofifilter="${rofifilter:+$rofifilter }^"; fi;

# ╭──────────────╮
# │ dependencies │
# ╰──────────────╯
# is grep -P supported? If not, use grep -E
RETYPE=$(echo | grep -P "" &>/dev/null && printf P || printf E);
# env var for yank command
KWSEARCH_YANKCMD=${KWSEARCH_YANKCMD:-xsel -ib};

# ╭─────────────────────────╮
# │ non-interactive filters │
# ╰─────────────────────────╯
bmarksjson=$tempd/bmarksjson;

jq 'recurse(.children[]?)' "$bmfile" |

    # --folder
    if [ -n "$folder" ]; then
        jq 'select(.title | test("'"$folder"'")?) | recurse(.children[]?)';
    else cat;
    fi |
    jq -rc 'select(.uri) | {keyword, title, uri}' |

    # --keyword-only
    if [ -n "$kwonly" ]; then
        jq -c 'select(.keyword)';
    else cat;
    fi |

    # javascript: URI only
    if [ -n "$protocol" ]; then
        jq -c 'select(.uri | test("^'"$protocol"':"))';
    else cat;
    fi |

    # select by --find-keyword ?
    if [ -n "${kw+SET}" ]; then
        jq -c "select(.keyword == \"$kw\")";
    else
        # filter results
        # filter with regex
        if [ -n "$regex" ]; then
            grep -i -$RETYPE "$regex";
        else
            cat;
        fi;

    fi > $bmarksjson;

# ╭────────────────╮
# │ rofi selection │
# ╰────────────────╯
lines=$tempd/lines;

if [ -n "$rofi" ]; then
    cat $bmarksjson |
        perl -pe 's/{"keyword":(null|"(.*)"),"title":"(.*)","uri":"(.*)"}/
                    sprintf("%-18s \t%s  (<%s>)","$2:",$3,$4)/e' |
        rofi -theme-str "$rofitheme" -dmenu "$case" -no-custom -matching "regex" -format d -filter "$rofifilter" $multi > $lines;
fi;

# ╭────────╮
# │ output │
# ╰────────╯

if [ -n "$rofi" ]; then
    fifo1=$tempd/fifo1;
    mkfifo $fifo1;
    sed 's/$/p/' $lines > $fifo1 & sed -n -f $fifo1 $bmarksjson;
else
    cat $bmarksjson;
fi |

    # output format
    case $oformat in
        url) jq -r '.uri'; ;;
        kw)  jq -r '.keyword'; ;;
        tri) perl -pe 's/{"keyword":"(.*)","title":"(.*)","uri":"(.*)"}/set searchurls.$1 $3/'; ;;
        json | *) cat; ;;
    esac |

    # arguments: resolve search bookmark URLs
    if [ -n "$args" ]; then
        # TODO: handle | in arguments
        # TODO: handle escaping in search URL
        s=$(printf %s "$*" | jq -sRr @uri);
        S=`echo "$*" | perl -pe 's/&/\\\\&/g'`;
        sed "s|%S|$S|" | sed "s|%s|$s|";
    else
        cat;
    fi |

    # single-line?
    if [ -n "$oneline" ]; then
        tr "\n" " " | sed -r 's/ +$//';
    else
        cat;
    fi |

    # yank?
    if [ "$yank" = only ]; then
        $KWSEARCH_YANKCMD;
    elif [ -n "$yank" ]; then
        fifo2=$tempd/fifo2;
        mkfifo $fifo2;
        $KWSEARCH_YANKCMD <$fifo2 & pid2=$!;
        tee $fifo2;
        wait $pid2;
    else
        cat;
    fi;
